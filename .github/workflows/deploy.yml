name: Deploy Lambda Go to AWS

on:
  push:
    branches: [main]
    paths:
      - 'Dockerfile'
      - '.github/workflows/deploy.yml'
      - 'infra/**'
      - 'app/**'
      - 'go.mod'
      - 'go.sum'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: staging-lambda-go
  FUNCTION_NAME: staging-golang-api
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (access keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 \
            || aws ecr create-repository --repository-name "$ECR_REPOSITORY" >/dev/null

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build image
        run: |
          docker build --platform linux/amd64 -t $ECR_REPOSITORY:$IMAGE_TAG .

      - name: Tag image for ECR
        run: |
          docker tag $ECR_REPOSITORY:$IMAGE_TAG \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push image
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update Lambda code to new image
        run: |
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG \
            --no-cli-pager

      - name: Wait for function to update
        run: aws lambda wait function-updated --function-name "$FUNCTION_NAME"

      - name: Publish new version
        id: publish
        run: |
          VERSION=$(aws lambda publish-version --function-name "$FUNCTION_NAME" --query 'Version' --output text)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Published version: $VERSION"

      - name: Upsert alias "staging"
        run: |
          set -euo pipefail
          ALIAS="staging"
          VERSION="${{ steps.publish.outputs.version }}"
          if aws lambda get-alias --function-name "$FUNCTION_NAME" --name "$ALIAS" >/dev/null 2>&1; then
            aws lambda update-alias --function-name "$FUNCTION_NAME" --name "$ALIAS" --function-version "$VERSION" --no-cli-pager
          else
            aws lambda create-alias --function-name "$FUNCTION_NAME" --name "$ALIAS" --function-version "$VERSION" --no-cli-pager
          fi

      - name: Set provisioned concurrency (2)
        run: |
          aws lambda put-provisioned-concurrency-config \
            --function-name "$FUNCTION_NAME" \
            --qualifier staging \
            --provisioned-concurrent-executions 2

      - name: Wait PC to be READY
        run: |
          for i in {1..30}; do
            STATUS=$(aws lambda get-provisioned-concurrency-config --function-name "$FUNCTION_NAME" --qualifier staging --query 'Status' --output text || true)
            echo "Provisioned Concurrency Status: $STATUS"
            if [ "$STATUS" = "READY" ]; then exit 0; fi
            if [ "$STATUS" = "FAILED" ]; then echo "PC failed"; exit 1; fi
            sleep 10
          done
          echo "Timeout waiting PC to be READY"; exit 1

      - name: Show effective image digest
        run: |
          aws lambda get-function --function-name "$FUNCTION_NAME" --qualifier staging \
            --query 'Code.ImageUri' --output text
